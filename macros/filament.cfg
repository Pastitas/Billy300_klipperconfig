#####################################################
################# Filament sensor ####################
######################################################

[respond]
default_type: echo

[delayed_gcode clear_display]
gcode:
  M117 # clear display message

[force_move]
enable_force_move: True

######## filament sensor button macros ############
[gcode_button filament_sensor]
pin: P1.28 
press_gcode: # sensor released
  {% if (printer.print_stats.state == "printing") %}  
    filament_runout
  {% endif %}

release_gcode: #gcode macro for filament load, sensor pressed
  filament_load
  SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=filamentpresent VALUE=1

#********************************************************************************************************
####### Filament Unload button macros ########

# [gcode_button sensor_fu]
# #pin: PA8  # !!!!!!!!!!!!!!!!!!!!!!!change with the pin name to which the sensor is connected!!!!!!!!!!!!!!!!!!!!!
# pin:  # remove the negation "!" for sensor v1 - use just PA10 as example
# release_gcode:  # filament unload procedure   
#   {% if (printer.print_stats.state != "printing")%} # requires [virtual_sdcard]   
#      filament_unload     
#   {% else %}
#      M117 Printing! Can't unload filament right now!
#      M118 Printing! Can't unload filament right now! #M117 message to display    
#   {% endif %}
# press_gcode: # do not add any macro call here

#**************************************************************************************************************
######## State machine for printer status ########

[delayed_gcode clear_busy]
gcode:
  SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=busy VALUE=0
  SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=busy VALUE=0

[delayed_gcode set_busy]
gcode:
  SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=busy VALUE=1 
  SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=busy VALUE=1

[delayed_gcode clear_debounce]
gcode:
  SET_GCODE_VARIABLE MACRO=filament_runout VARIABLE=debounce VALUE=0
  
[gcode_macro filament_runout]
variable_debounce: 0
gcode:
  {% if debounce == 0 %}
    SET_GCODE_VARIABLE MACRO=filament_runout VARIABLE=debounce VALUE=1
    PAUSE # call printer pause macro
    UPDATE_DELAYED_GCODE ID=clear_debounce DURATION=10
    M117 "Filament runout detected."
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=10

  {% endif %}

[gcode_macro filament_load]
variable_busy: 0
variable_filamentpresent: 0
gcode:    
    {% if busy == 1 %} # requires [virtual_sdcard]
      { action_raise_error("Can't load if extruder is busy or filament already loaded.") }
    {% else %}
      UPDATE_DELAYED_GCODE ID=set_busy DURATION=0
      LOAD_FILAMENT
      UPDATE_DELAYED_GCODE ID=clear_busy DURATION=0
    {% endif %}

[gcode_macro filament_unload]
variable_busy: 0
variable_filamentpresent: 0
gcode:
  UNLOAD_FILAMENT

############################################################
##################### Filament changes ##################### 
############################################################

[gcode_macro _load_unload]
variable_is_printing: 1
# Length (in mm) of filament to load (bowden tubes will be longer).
variable_load_length: 65.0
# Filament loading speed (in mm/m).
variable_load_speed: 300
# Length (in mm) of the filament loading that feeds at priming speed.
variable_load_priming_length: 10.0
# Filament priming speed (in mm/m).
variable_load_priming_speed: 150
# Universal load temp
variable_load_default_temp: 225
gcode:
  # Klipper thinks we're printing if parking homed first, so this is a hack to
  # prevent that from happening. The caller sets the value and we clear it.
  SET_GCODE_VARIABLE MACRO=_load_unload VARIABLE=is_printing VALUE="{1}"
  {% set saved_extruder = printer.toolhead.extruder %}
  {% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}
  {% if 'MINIMUM' in params %}
    {% set MINIMUM = params.MINIMUM|int %}
 # This is the special case for a filament change after an idle timeout.
  {% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and printer["gcode_macro resume"].saved_extruder_temp %}
    {% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}
  {% else %}
    {% set MINIMUM = printer.configfile.settings[EXTRUDER].min_extrude_temp + 5.0 %}
  {% endif %}
  {% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}
    { action_raise_error("Extrude below minimum temp.") }
  {% elif printer.pause_resume.is_paused %}
    # Clear the saved E if we're (un-)loading while paused.
    SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
  {% elif printer.idle_timeout.state == "Printing" and is_printing %}
    { action_raise_error("Command not valid during printing.") }
    M117 Command not valid during printing.
  {% endif %}
  {% set SPEED = load_speed|int %}
  {% set priming_length = load_priming_length %}
  {% set LENGTH = load_length|float - priming_length%}
  SAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
  {% if printer.extruder.target < MINIMUM %}
    M109 S{load_default_temp}
  {% endif %}
  M83
  {% if params.LOAD|int %}
    G1 E{LENGTH} F{SPEED}
    G1 E{priming_length} F{(km.load_priming_speed, SPEED)|min}
    G1 E{'%.4f' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}
  {% else %}
    G1 E3.0 F{SPEED}
    G4 P500
    G1 E{'%.4f' % -priming_length} F{(km.load_priming_speed, SPEED)|min}
    G1 E{'%.4f' % -LENGTH} F{SPEED}
  {% endif %}
  RESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD

[gcode_macro load_filament]
description: Loads filament to the extruder.
  Usage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
                       [EXTRUDER=<extruder>] [MINIMUM=<temperature>]
gcode:
  _LOAD_UNLOAD LOAD=1{% for k in params%}{' '~k~'="'~params[k]~'"'}{% endfor %}

  # Dummy argument block for Mainsail
  {% set dummy = None if True else "
  {% set dummy = params.LENGTH|default(variable_load_length)|float %}
  {% set dummy = params.SPEED|default(variable_load_speed)|float %}
  {% set dummy = params.EXTRUDER|default(current extruder) %}
  {% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
  " %} # End argument block for Mainsail

[gcode_macro unload_filament]
description: Unloads filament from the extruder.
  Usage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
                         [EXTRUDER=<extruder>] [MINIMUM=<temperature>]
gcode:
  _LOAD_UNLOAD LOAD=0{% for k in params%}{' '~k~'="'~params[k]~'"'}{% endfor %}

  # Dummy argument block for Mainsail
  {% set dummy = None if True else "
  {% set dummy = params.LENGTH|default(variable_load_length)|float %}
  {% set dummy = params.SPEED|default(variable_load_speed)|float %}
  {% set dummy = params.EXTRUDER|default(default extruder) %}
  {% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
  " %} # End argument block for Mainsail
